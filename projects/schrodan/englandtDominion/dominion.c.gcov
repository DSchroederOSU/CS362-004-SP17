        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:15
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 674533 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
   674533:    9:  if (*(int*)a > *(int*)b)
   674533:    9-block  0
branch  0 taken 23%
branch  1 taken 77%
   153788:   10:    return 1;
   153788:   10-block  0
   520745:   11:  if (*(int*)a < *(int*)b)
   520745:   11-block  0
branch  0 taken 46%
branch  1 taken 54%
   237603:   12:    return -1;
   237603:   12-block  0
   283142:   13:  return 0;
   283142:   13-block  0
   674533:   14:}
   674533:   14-block  0
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    $$$$$:   17-block  0
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 8004 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     8004:   44:  SelectStream(1);
     8004:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     8004:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
     8004:   48-block  0
branch  0 taken 100%
branch  1 taken 0%
     8004:   48-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     8004:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    88044:   57:  for (i = 0; i < 10; i++)
     8004:   57-block  0
    88044:   57-block  1
branch  0 taken 91%
branch  1 taken 9%
    80040:   57-block  2
        -:   58:    {
   880440:   59:      for (j = 0; j < 10; j++)
    80040:   59-block  0
   880440:   59-block  1
branch  0 taken 91%
branch  1 taken 9%
   800400:   59-block  2
        -:   60:        {
   800400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
   800400:   61-block  0
branch  0 taken 90%
branch  1 taken 10%
   720360:   61-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
   800400:   65:        }
   800400:   65-block  0
    80040:   66:    }
    80040:   66-block  0
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     8004:   73:  if (numPlayers == 2)
     8004:   73-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
     8004:   75:      state->supplyCount[curse] = 10;
     8004:   76:    }
     8004:   76-block  0
    #####:   77:  else if (numPlayers == 3)
    $$$$$:   77-block  0
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
    $$$$$:   80-block  0
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
    $$$$$:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     8004:   87:  if (numPlayers == 2)
     8004:   87-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
     8004:   89:      state->supplyCount[estate] = 8;
     8004:   90:      state->supplyCount[duchy] = 8;
     8004:   91:      state->supplyCount[province] = 8;
     8004:   92:    }
     8004:   92-block  0
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
    $$$$$:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     8004:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     8004:  102:  state->supplyCount[silver] = 40;
     8004:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   168084:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
     8004:  106-block  0
   168084:  106-block  1
branch  0 taken 95%
branch  1 taken 5%
   160080:  106-block  2
        -:  107:    {
  1320660:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
   160080:  108-block  0
  1320660:  108-block  1
branch  0 taken 94%
branch  1 taken 6%
  1160580:  108-block  2
        -:  109:	{
  1240620:  110:	  if (kingdomCards[j] == i)
  1240620:  110-block  0
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    80040:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
    80040:  113-block  0
branch  0 taken 90%
branch  1 taken 10%
    72036:  113-block  1
branch  2 taken 11%
branch  3 taken 89%
        -:  114:		{
    16008:  115:		  if (numPlayers == 2){ 
    16008:  115-block  0
branch  0 taken 100%
branch  1 taken 0%
    16008:  116:		    state->supplyCount[i] = 8; 
    16008:  117:		  }
    16008:  117-block  0
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
    16008:  119:		}
    16008:  119-block  0
        -:  120:	      else
        -:  121:		{
    64032:  122:		  state->supplyCount[i] = 10;
    64032:  122-block  0
        -:  123:		}
    80040:  124:	      break;
    80040:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1160580:  128:	      state->supplyCount[i] = -1;
  1160580:  128-block  0
        -:  129:	    }
  1160580:  130:	}
  1160580:  130-block  0
        -:  131:
   160080:  132:    }
   160080:  132-block  0
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    24012:  138:  for (i = 0; i < numPlayers; i++)
     8004:  138-block  0
    24012:  138-block  1
branch  0 taken 67%
branch  1 taken 33%
    16008:  138-block  2
        -:  139:    {
    16008:  140:      state->deckCount[i] = 0;
    64032:  141:      for (j = 0; j < 3; j++)
    16008:  141-block  0
    64032:  141-block  1
branch  0 taken 75%
branch  1 taken 25%
    48024:  141-block  2
        -:  142:	{
    48024:  143:	  state->deck[i][j] = estate;
    48024:  144:	  state->deckCount[i]++;
    48024:  145:	}
    48024:  145-block  0
   128064:  146:      for (j = 3; j < 10; j++)
    16008:  146-block  0
   128064:  146-block  1
branch  0 taken 88%
branch  1 taken 13%
   112056:  146-block  2
        -:  147:	{
   112056:  148:	  state->deck[i][j] = copper;
   112056:  149:	  state->deckCount[i]++;		
   112056:  150:	}
   112056:  150-block  0
    16008:  151:    }
    16008:  151-block  0
        -:  152:
        -:  153:  //shuffle player decks
    24012:  154:  for (i = 0; i < numPlayers; i++)
     8004:  154-block  0
    24012:  154-block  1
branch  0 taken 67%
branch  1 taken 33%
    16008:  154-block  2
        -:  155:    {
    16008:  156:      if ( shuffle(i, state) < 0 )
    16008:  156-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
        -:  159:	}
    16008:  160:    }
    16008:  160-block  0
        -:  161:
        -:  162:  //draw player hands
    24012:  163:  for (i = 0; i < numPlayers; i++)
     8004:  163-block  0
    24012:  163-block  1
branch  0 taken 67%
branch  1 taken 33%
    16008:  163-block  2
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    16008:  166:      state->handCount[i] = 0;
    16008:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    16008:  173:    }
    16008:  173-block  0
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   224112:  176:  for (i = 0; i <= treasure_map; i++)
     8004:  176-block  0
   224112:  176-block  1
branch  0 taken 96%
branch  1 taken 4%
   216108:  176-block  2
        -:  177:    {
   216108:  178:      state->embargoTokens[i] = 0;
   216108:  179:    }
   216108:  179-block  0
        -:  180:
        -:  181:  //initialize first player's turn
     8004:  182:  state->outpostPlayed = 0;
     8004:  183:  state->phase = 0;
     8004:  184:  state->numActions = 1;
     8004:  185:  state->numBuys = 1;
     8004:  186:  state->playedCardCount = 0;
     8004:  187:  state->whoseTurn = 0;
     8004:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    48024:  192:  for (it = 0; it < 5; it++){
     8004:  192-block  0
    48024:  192-block  1
branch  0 taken 83%
branch  1 taken 17%
    40020:  192-block  2
    40020:  193:    drawCard(state->whoseTurn, state);
    40020:  194:  }
    40020:  194-block  0
        -:  195:
     8004:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     8004:  198:  return 0;
     8004:  198-block  0
     8004:  199:}
     8004:  199-block  0
        -:  200:
function shuffle called 16535 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    16535:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    16535:  209:  if (state->deckCount[player] < 1)
    16535:  209-block  0
branch  0 taken 1%
branch  1 taken 99%
        4:  210:    return -1;
        4:  210-block  0
    16531:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   305361:  214:  while (state->deckCount[player] > 0) {
    16531:  214-block  0
   305361:  214-block  1
branch  0 taken 95%
branch  1 taken 5%
   288830:  214-block  2
   288830:  215:    card = floor(Random() * state->deckCount[player]);
   288830:  216:    newDeck[newDeckPos] = state->deck[player][card];
   288830:  217:    newDeckPos++;
 11435700:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   288830:  218-block  0
 11435700:  218-block  1
branch  0 taken 97%
branch  1 taken 3%
 11146870:  218-block  2
 11146870:  219:      state->deck[player][i] = state->deck[player][i+1];
 11146870:  220:    }
 11146870:  220-block  0
   288830:  221:    state->deckCount[player]--;
        -:  222:  }
   305361:  223:  for (i = 0; i < newDeckPos; i++) {
    16531:  223-block  0
   305361:  223-block  1
branch  0 taken 95%
branch  1 taken 5%
   288830:  223-block  2
   288830:  224:    state->deck[player][i] = newDeck[i];
   288830:  225:    state->deckCount[player]++;
   288830:  226:  }
   288830:  226-block  0
        -:  227:
    16531:  228:  return 0;
    16531:  228-block  0
    16535:  229:}
    16535:  229-block  0
        -:  230:
function playCard called 7000 returned 100% blocks executed 75%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     7000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     7000:  237:  if (state->phase != 0)
     7000:  237-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     7000:  243:  if ( state->numActions < 1 )
     7000:  243-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     7000:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
     7000:  252:  if ( card < adventurer || card > treasure_map )
     7000:  252-block  0
branch  0 taken 50%
branch  1 taken 50%
     3500:  252-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:  253:    {
     3500:  254:      return -1;
     3500:  254-block  0
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     3500:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
     3500:  258-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
     3500:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
     3500:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
     3500:  269:  return 0;
     3500:  269-block  0
     7000:  270:}
     7000:  270-block  0
        -:  271:
function buyCard called 6383 returned 100% blocks executed 100%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
     6383:  280:  who = state->whoseTurn;
        -:  281:
     6383:  282:  if (state->numBuys < 1){
     6383:  282-block  0
branch  0 taken 1%
branch  1 taken 99%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        1:  285-block  0
     6382:  286:  } else if (supplyCount(supplyPos, state) <1){
     6382:  286-block  0
branch  0 taken 1%
branch  1 taken 99%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       10:  289:    return -1;
       10:  289-block  0
     6372:  290:  } else if (state->coins < getCost(supplyPos)){
     6372:  290-block  0
branch  0 taken 8%
branch  1 taken 92%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      500:  293:    return -1;
      500:  293-block  0
        -:  294:  } else {
     5872:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
     5872:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
     5872:  299:    state->coins = (state->coins) - (getCost(supplyPos));
     5872:  300:    state->numBuys--;
     5872:  300-block  0
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
     5872:  308:  return 0;
     5872:  308-block  0
     6383:  309:}
     6383:  309-block  0
        -:  310:
function numHandCards called 1 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
        1:  312:  return state->handCount[ whoseTurn(state) ];
        1:  312-block  0
        -:  313:}
        -:  314:
function handCard called 7008 returned 100% blocks executed 100%
        -:  315:int handCard(int handPos, struct gameState *state) {
     7008:  316:  int currentPlayer = whoseTurn(state);
     7008:  317:  return state->hand[currentPlayer][handPos];
     7008:  317-block  0
        -:  318:}
        -:  319:
function supplyCount called 12254 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
    12254:  321:  return state->supplyCount[card];
    12254:  321-block  0
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  328-block  0
    $$$$$:  328-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  328-block  2
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    $$$$$:  330-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  330-block  1
    #####:  331:    }
    $$$$$:  331-block  0
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  333-block  0
    $$$$$:  333-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  333-block  2
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    $$$$$:  335-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  335-block  1
    #####:  336:    }
    $$$$$:  336-block  0
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  338-block  0
    $$$$$:  338-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  338-block  2
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    $$$$$:  340-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  340-block  1
    #####:  341:    }
    $$$$$:  341-block  0
        -:  342:
    #####:  343:  return count;
    $$$$$:  343-block  0
        -:  344:}
        -:  345:
function whoseTurn called 18067 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
    18067:  347:  return state->whoseTurn;
    18067:  347-block  0
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  356-block  0
    $$$$$:  356-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  356-block  2
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    $$$$$:  359-block  0
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
    $$$$$:  365-block  0
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
    $$$$$:  380-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  380-block  2
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
    $$$$$:  382-block  0
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
    $$$$$:  387-block  0
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
    $$$$$:  395-block  0
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
    $$$$$:  397-block  0
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
    $$$$$:  402-block  0
    $$$$$:  402-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  402-block  2
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
    $$$$$:  404-block  0
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    $$$$$:  407-block  0
    #####:  408:    }
    $$$$$:  408-block  0
    #####:  409:  if ( j >= 3)
    $$$$$:  409-block  0
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
    $$$$$:  411-block  0
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    $$$$$:  414-block  0
    #####:  415:}
    $$$$$:  415-block  0
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
    $$$$$:  422-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  422-block  2
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
    #####:  430:    }
    $$$$$:  430-block  0
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
    $$$$$:  433-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  433-block  2
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
    #####:  441:    }
    $$$$$:  441-block  0
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
    $$$$$:  444-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  444-block  2
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
    #####:  452:    }
    $$$$$:  452-block  0
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
    $$$$$:  464-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  464-block  2
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
    $$$$$:  470-block  0
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
        -:  474:	}
    #####:  475:    }
    $$$$$:  475-block  0
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
    $$$$$:  479-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  479-block  2
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    $$$$$:  484-block  0
    #####:  485:    }
    $$$$$:  485-block  0
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  490-block  0
    $$$$$:  490-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  490-block  2
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    $$$$$:  495-block  0
    #####:  496:    }
    $$$$$:  496-block  0
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
    $$$$$:  500-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  500-block  2
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    $$$$$:  505-block  0
    #####:  506:    }
    $$$$$:  506-block  0
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
    $$$$$:  510-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  510-block  2
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
    $$$$$:  515-block  0
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
        -:  519:	}
    #####:  520:    }
    $$$$$:  520-block  0
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
        -:  523:}
        -:  524:
function drawCard called 51019 returned 100% blocks executed 100%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    51019:  528:  if (state->deckCount[player] <= 0){//Deck is empty
    51019:  528-block  0
branch  0 taken 1%
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     4025:  533:    for (i = 0; i < state->discardCount[player];i++){
       25:  533-block  0
     4025:  533-block  1
branch  0 taken 99%
branch  1 taken 1%
     4000:  533-block  2
     4000:  534:      state->deck[player][i] = state->discard[player][i];
     4000:  535:      state->discard[player][i] = -1;
     4000:  536:    }
     4000:  536-block  0
        -:  537:
       25:  538:    state->deckCount[player] = state->discardCount[player];
       25:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       25:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       25:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       25:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       25:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       25:  559:    if (deckCounter == 0)
       25:  559-block  0
branch  0 taken 4%
branch  1 taken 96%
        1:  560:      return -1;
        1:  560-block  0
        -:  561:
       24:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       24:  563:    state->deckCount[player]--;
       24:  564:    state->handCount[player]++;//Increment hand count
       24:  565:  }
       24:  565-block  0
        -:  566:
        -:  567:  else{
    50994:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    50994:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    50994:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    50994:  576:    state->deckCount[player]--;
    50994:  577:    state->handCount[player]++;//Increment hand count
    50994:  577-block  0
        -:  578:  }
        -:  579:
    51018:  580:  return 0;
    51018:  580-block  0
    51019:  581:}
    51019:  581-block  0
        -:  582:
function getCost called 18048 returned 100% blocks executed 100%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    18048:  585:  switch( cardNumber ) 
    18048:  585-block  0
branch  0 taken 1%
branch  1 taken 1%
branch  2 taken 1%
branch  3 taken 1%
branch  4 taken 1%
branch  5 taken 1%
branch  6 taken 1%
branch  7 taken 10%
branch  8 taken 10%
branch  9 taken 10%
branch 10 taken 10%
branch 11 taken 10%
branch 12 taken 10%
branch 13 taken 10%
branch 14 taken 10%
branch 15 taken 10%
branch 16 taken 10%
branch 17 taken 1%
branch 18 taken 1%
branch 19 taken 1%
branch 20 taken 1%
branch 21 taken 1%
branch 22 taken 1%
branch 23 taken 1%
branch 24 taken 1%
branch 25 taken 1%
branch 26 taken 1%
branch 27 taken 1%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        1:  588-block  0
        -:  589:    case estate:
        1:  590:      return 2;
        1:  590-block  0
        -:  591:    case duchy:
        1:  592:      return 5;
        1:  592-block  0
        -:  593:    case province:
        1:  594:      return 8;
        1:  594-block  0
        -:  595:    case copper:
        1:  596:      return 0;
        1:  596-block  0
        -:  597:    case silver:
        2:  598:      return 3;
        2:  598-block  0
        -:  599:    case gold:
        1:  600:      return 6;
        1:  600-block  0
        -:  601:    case adventurer:
     1779:  602:      return 6;
     1779:  602-block  0
        -:  603:    case council_room:
     1757:  604:      return 5;
     1757:  604-block  0
        -:  605:    case feast:
     1850:  606:      return 4;
     1850:  606-block  0
        -:  607:    case gardens:
     1845:  608:      return 4;
     1845:  608-block  0
        -:  609:    case mine:
     1767:  610:      return 5;
     1767:  610-block  0
        -:  611:    case remodel:
     1800:  612:      return 4;
     1800:  612-block  0
        -:  613:    case smithy:
     1768:  614:      return 4;
     1768:  614-block  0
        -:  615:    case village:
     1742:  616:      return 3;
     1742:  616-block  0
        -:  617:    case baron:
     1847:  618:      return 4;
     1847:  618-block  0
        -:  619:    case great_hall:
     1874:  620:      return 3;
     1874:  620-block  0
        -:  621:    case minion:
        1:  622:      return 5;
        1:  622-block  0
        -:  623:    case steward:
        1:  624:      return 3;
        1:  624-block  0
        -:  625:    case tribute:
        1:  626:      return 5;
        1:  626-block  0
        -:  627:    case ambassador:
        1:  628:      return 3;
        1:  628-block  0
        -:  629:    case cutpurse:
        1:  630:      return 4;
        1:  630-block  0
        -:  631:    case embargo: 
        1:  632:      return 2;
        1:  632-block  0
        -:  633:    case outpost:
        1:  634:      return 5;
        1:  634-block  0
        -:  635:    case salvager:
        1:  636:      return 4;
        1:  636-block  0
        -:  637:    case sea_hag:
        1:  638:      return 4;
        1:  638-block  0
        -:  639:    case treasure_map:
        1:  640:      return 4;
        1:  640-block  0
        -:  641:    }
        -:  642:	
        1:  643:  return -1;
        1:  643-block  0
    18048:  644:}
    18048:  644-block  0
        -:  645:
function Adventurer called 4 returned 100% blocks executed 100%
        -:  646:int Adventurer(struct gameState *state) {
        4:  647:	int currentPlayer = whoseTurn(state);
        -:  648:	int temphand[MAX_HAND];// moved above the if statement
        4:  649:	int drawntreasure=0;
        4:  650:	int cardDrawn = -1;
        4:  651:	int z = 0;// this is the counter for the temp hand
       19:  652:	while(drawntreasure<2){
        4:  652-block  0
       19:  652-block  1
branch  0 taken 79%
branch  1 taken 21%
       15:  652-block  2
       15:  653:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       15:  653-block  0
branch  0 taken 13%
branch  1 taken 87%
        2:  654:		  shuffle(currentPlayer, state);
        2:  655:		}
        2:  655-block  0
       15:  656:		drawCard(currentPlayer, state);
       15:  657:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       15:  658:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       15:  658-block  0
branch  0 taken 47%
branch  1 taken 53%
        7:  658-block  1
branch  2 taken 100%
branch  3 taken 0%
        7:  658-block  2
branch  4 taken 0%
branch  5 taken 100%
        8:  659:			drawntreasure++;
        8:  659-block  0
        -:  660:		else{
        7:  661:			temphand[z]=cardDrawn;
        7:  662:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        7:  663:			z++;
        7:  663-block  0
        -:  664:		}
        -:  665:	}
       11:  666:	while(z-1>=0){
        4:  666-block  0
       11:  666-block  1
branch  0 taken 64%
branch  1 taken 36%
        7:  666-block  2
        7:  667:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        7:  668:		z=z-1;
        -:  669:	}
        4:  670:	return 0;	  
        4:  670-block  0
        -:  671:}
        -:  672:
function CouncilRoom called 0 returned 0% blocks executed 0%
        -:  673:int CouncilRoom(struct gameState *state, int handPos) {
        -:  674:	int i;
    #####:  675:	int currentPlayer = whoseTurn(state);
        -:  676:	//+4 Cards
    #####:  677:	for (i = 0; i < 4; i++) {
    $$$$$:  677-block  0
    $$$$$:  677-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  677-block  2
    #####:  678:		drawCard(currentPlayer, state);
    #####:  679:	}
    $$$$$:  679-block  0
        -:  680:	//+1 Buy
    #####:  681:	state->numBuys++;
        -:  682:		
        -:  683:	//Each other player draws a card
    #####:  684:	for (i = 0; i < state->numPlayers; i++)
    $$$$$:  684-block  0
    $$$$$:  684-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  684-block  2
        -:  685:	{
    #####:  686:	if ( i != currentPlayer )
    $$$$$:  686-block  0
branch  0 never executed
branch  1 never executed
        -:  687:	{
    #####:  688:	  drawCard(i, state);
    #####:  689:	}
    $$$$$:  689-block  0
    #####:  690:	}
    $$$$$:  690-block  0
        -:  691:		
        -:  692:	//put played card in played card pile
    #####:  693:	discardCard(handPos, currentPlayer, state, 0);
        -:  694:		
    #####:  695:	return 0;
    $$$$$:  695-block  0
        -:  696:}
        -:  697:
function SeaHag called 0 returned 0% blocks executed 0%
        -:  698:int SeaHag(struct gameState *state) {
        -:  699:	int i;
    #####:  700:	int currentPlayer = whoseTurn(state);
    #####:  701:	for (i = 0; i < state->numPlayers; i++){
    $$$$$:  701-block  0
    $$$$$:  701-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  701-block  2
    #####:  702:		if (i != currentPlayer){
    $$$$$:  702-block  0
branch  0 never executed
branch  1 never executed
    #####:  703:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####:  704:			state->deckCount[i]--;
    #####:  705:			state->discardCount[i]++;
        -:  706:			//modyfing the bug I introduced which caused a dereferencing error thus producing no results
        -:  707:			//here we will simply make sure we never try to dereference -1. Original bug should still be
        -:  708:			//present for all values of i > 0
        -:  709:			//if(i == 0) state->deck[i][state->deckCount[i]--] = curse;//Correct implementation
    #####:  710:			state->deck[i][state->deckCount[i]--] = curse;//Correct implementation
        -:  711:			//else state->deck[i][state->deckCount[i--]] = curse;//Bug -- //Top card now a curse
    #####:  712:		}
    $$$$$:  712-block  0
    #####:  713:	}
    $$$$$:  713-block  0
    #####:  714:	return 0;
    $$$$$:  714-block  0
        -:  715:}
        -:  716:
function Smithy called 3494 returned 100% blocks executed 100%
        -:  717:void Smithy(struct gameState *state, int handPos) {
        -:  718:	int i;
     3494:  719:	int currentPlayer = whoseTurn(state);
        -:  720:	//+3 Cards
    13976:  721:      for (i = 0; i < 3; i++)
     3494:  721-block  0
    13976:  721-block  1
branch  0 taken 75%
branch  1 taken 25%
    10482:  721-block  2
        -:  722:	{
    10482:  723:	  drawCard(currentPlayer, state);
    10482:  724:	}
    10482:  724-block  0
        -:  725:			
        -:  726:	//discard card from hand
     3494:  727:	discardCard(handPos, currentPlayer, state, 0);
     3494:  728:}
     3494:  728-block  0
        -:  729:
function TreasureMap called 0 returned 0% blocks executed 0%
        -:  730:int TreasureMap(struct gameState *state, int handPos) {
        -:  731:	 int i;
        -:  732:	 int index;
    #####:  733:	 int currentPlayer = whoseTurn(state);
        -:  734:	//search hand for another treasure_map
    #####:  735:	index = -1;
    #####:  736:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    $$$$$:  736-block  0
    $$$$$:  736-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  736-block  2
    #####:  737:		if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
    $$$$$:  737-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  737-block  1
branch  2 never executed
branch  3 never executed
    #####:  738:			index = i;
    #####:  739:			break;
    $$$$$:  739-block  0
        -:  740:		}
    #####:  741:	}
    $$$$$:  741-block  0
    #####:  742:	if (index > -1) {
    $$$$$:  742-block  0
branch  0 never executed
branch  1 never executed
        -:  743:		//trash both treasure cards
    #####:  744:		discardCard(handPos, currentPlayer, state, 1);
    #####:  745:		discardCard(index, currentPlayer, state, 1);
        -:  746:		
        -:  747:		//gain 4 Gold cards
    #####:  748:		for (i = 0; i < 4; i++) {
    $$$$$:  748-block  0
    $$$$$:  748-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  748-block  2
    #####:  749:			gainCard(gold, state, 1, currentPlayer);
    #####:  750:		}
    $$$$$:  750-block  0
        -:  751:		//return success
    #####:  752:		return 1;
    $$$$$:  752-block  0
        -:  753:	}
        -:  754:
        -:  755:	//no second treasure_map found in hand
    #####:  756:	return -1;
    $$$$$:  756-block  0
        -:  757:	
    #####:  758:}
    $$$$$:  758-block  0
        -:  759:
function cardEffect called 3500 returned 100% blocks executed 5%
        -:  760:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  761:{
        -:  762:  int i;
        -:  763:  int j;
        -:  764:  int k;
        -:  765:  int x;
        -:  766:  int index;
     3500:  767:  int currentPlayer = whoseTurn(state);
     3500:  768:  int nextPlayer = currentPlayer + 1;
        -:  769:
     3500:  770:  int tributeRevealedCards[2] = {-1, -1};
        -:  771:  int temphand[MAX_HAND];// moved above the if statement
     3500:  772:  int drawntreasure=0;
        -:  773:  int cardDrawn;
     3500:  774:  int z = 0;// this is the counter for the temp hand
     3500:  775:  if (nextPlayer > (state->numPlayers - 1)){
     3500:  775-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:  776:    nextPlayer = 0;
    #####:  777:  }
    $$$$$:  777-block  0
        -:  778:  
        -:  779:	
        -:  780:  //uses switch to select card and perform actions
     4000:  781:  switch( card ) 
     4000:  781-block  0
branch  0 taken 1%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 87%
branch  7 taken 13%
branch  8 taken 0%
branch  9 taken 1%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 1%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  782:    {
        -:  783:	case adventurer:
        4:  784:		return Adventurer(state);
        4:  784-block  0
        -:  785:	
        -:  786:    case council_room:
    #####:  787:		return CouncilRoom(state, handPos);
    $$$$$:  787-block  0
        -:  788:			
        -:  789:    case feast:
        -:  790:      //gain card with cost up to 5
        -:  791:      //Backup hand
    #####:  792:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  792-block  0
    $$$$$:  792-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  792-block  2
    #####:  793:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  794:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  795:      }
    $$$$$:  795-block  0
        -:  796:      //Backup hand
        -:  797:
        -:  798:      //Update Coins for Buy
    #####:  799:      updateCoins(currentPlayer, state, 5);
    #####:  800:      x = 1;//Condition to loop on
    #####:  801:      while( x == 1) {//Buy one card
    $$$$$:  801-block  0
    $$$$$:  801-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  801-block  2
    #####:  802:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  802-block  0
branch  0 never executed
branch  1 never executed
        -:  803:	  if (DEBUG)
        -:  804:	    printf("None of that card left, sorry!\n");
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  808:	  }
    #####:  809:	}
    $$$$$:  809-block  0
    #####:  810:	else if (state->coins < getCost(choice1)){
    $$$$$:  810-block  0
branch  0 never executed
branch  1 never executed
    #####:  811:	  printf("That card is too expensive!\n");
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  815:	  }
    #####:  816:	}
    $$$$$:  816-block  0
        -:  817:	else{
        -:  818:
        -:  819:	  if (DEBUG){
        -:  820:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  821:	  }
        -:  822:
    #####:  823:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  824:	  x = 0;//No more buying cards
    $$$$$:  824-block  0
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
        -:  830:	}
        -:  831:      }     
        -:  832:
        -:  833:      //Reset Hand
    #####:  834:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  834-block  0
    $$$$$:  834-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  834-block  2
    #####:  835:	state->hand[currentPlayer][i] = temphand[i];
    #####:  836:	temphand[i] = -1;
    #####:  837:      }
    $$$$$:  837-block  0
        -:  838:      //Reset Hand
        -:  839:      			
    #####:  840:      return 0;
    $$$$$:  840-block  0
        -:  841:			
        -:  842:    case gardens:
    #####:  843:      return -1;
    $$$$$:  843-block  0
        -:  844:			
        -:  845:    case mine:
    #####:  846:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  847:
    #####:  848:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  848-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  848-block  1
branch  2 never executed
branch  3 never executed
        -:  849:	{
    #####:  850:	  return -1;
    $$$$$:  850-block  0
        -:  851:	}
        -:  852:		
    #####:  853:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  853-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  853-block  1
branch  2 never executed
branch  3 never executed
        -:  854:	{
    #####:  855:	  return -1;
    $$$$$:  855-block  0
        -:  856:	}
        -:  857:
    #####:  858:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  858-block  0
branch  0 never executed
branch  1 never executed
        -:  859:	{
    #####:  860:	  return -1;
    $$$$$:  860-block  0
        -:  861:	}
        -:  862:
    #####:  863:      gainCard(choice2, state, 2, currentPlayer);
        -:  864:
        -:  865:      //discard card from hand
    #####:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:
        -:  868:      //discard trashed card
    #####:  869:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  869-block  0
    $$$$$:  869-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  869-block  2
        -:  870:	{
    #####:  871:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  871-block  0
branch  0 never executed
branch  1 never executed
        -:  872:	    {
    #####:  873:	      discardCard(i, currentPlayer, state, 0);			
    #####:  874:	      break;
    $$$$$:  874-block  0
        -:  875:	    }
    #####:  876:	}
    $$$$$:  876-block  0
        -:  877:			
    #####:  878:      return 0;
    $$$$$:  878-block  0
        -:  879:			
        -:  880:    case remodel:
    #####:  881:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  882:
    #####:  883:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  883-block  0
branch  0 never executed
branch  1 never executed
        -:  884:	{
    #####:  885:	  return -1;
    $$$$$:  885-block  0
        -:  886:	}
        -:  887:
    #####:  888:      gainCard(choice2, state, 0, currentPlayer);
        -:  889:
        -:  890:      //discard card from hand
    #####:  891:      discardCard(handPos, currentPlayer, state, 0);
        -:  892:
        -:  893:      //discard trashed card
    #####:  894:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  894-block  0
    $$$$$:  894-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  894-block  2
        -:  895:	{
    #####:  896:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  896-block  0
branch  0 never executed
branch  1 never executed
        -:  897:	    {
    #####:  898:	      discardCard(i, currentPlayer, state, 0);			
    #####:  899:	      break;
    $$$$$:  899-block  0
        -:  900:	    }
    #####:  901:	}
    $$$$$:  901-block  0
        -:  902:
        -:  903:
    #####:  904:      return 0;
    $$$$$:  904-block  0
        -:  905:		
        -:  906:    case smithy:
     3494:  907:       Smithy(state, handPos);
     3494:  908:       return 0;
     3494:  908-block  0
        -:  909:    case village:
        -:  910:      //+1 Card
      500:  911:      drawCard(currentPlayer, state);
        -:  912:			
        -:  913:      //+2 Actions
      500:  914:      state->numActions = state->numActions + 2;
        -:  915:			
        -:  916:      //discard played card from hand
      500:  917:      discardCard(handPos, currentPlayer, state, 0);
      500:  918:      return 0;
      500:  918-block  0
        -:  919:		
        -:  920:    case baron:
    #####:  921:      state->numBuys++;//Increase buys by 1!
    #####:  922:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  922-block  0
branch  0 never executed
branch  1 never executed
    #####:  923:	int p = 0;//Iterator for hand!
    #####:  924:	int card_not_discarded = 1;//Flag for discard set!
    #####:  925:	while(card_not_discarded){
    $$$$$:  925-block  0
    $$$$$:  925-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  925-block  2
    #####:  926:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  926-block  0
branch  0 never executed
branch  1 never executed
    #####:  927:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  928:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  929:	    state->discardCount[currentPlayer]++;
    #####:  930:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  930-block  0
    $$$$$:  930-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  930-block  2
    #####:  931:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  932:	    }
    $$$$$:  932-block  0
    #####:  933:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  934:	    state->handCount[currentPlayer]--;
    #####:  935:	    card_not_discarded = 0;//Exit the loop
    #####:  936:	  }
    $$$$$:  936-block  0
    #####:  937:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  937-block  0
branch  0 never executed
branch  1 never executed
        -:  938:	    if(DEBUG) {
        -:  939:	      printf("No estate cards in your hand, invalid choice\n");
        -:  940:	      printf("Must gain an estate if there are any\n");
        -:  941:	    }
    #####:  942:	    if (supplyCount(estate, state) > 0){
    $$$$$:  942-block  0
branch  0 never executed
branch  1 never executed
    #####:  943:	      gainCard(estate, state, 0, currentPlayer);
    #####:  944:	      state->supplyCount[estate]--;//Decrement estates
    #####:  945:	      if (supplyCount(estate, state) == 0){
    $$$$$:  945-block  0
branch  0 never executed
branch  1 never executed
    #####:  946:		isGameOver(state);
    #####:  947:	      }
    $$$$$:  947-block  0
    #####:  948:	    }
    $$$$$:  948-block  0
    #####:  949:	    card_not_discarded = 0;//Exit the loop
    #####:  950:	  }
    $$$$$:  950-block  0
        -:  951:			    
        -:  952:	  else{
    #####:  953:	    p++;//Next card
    $$$$$:  953-block  0
        -:  954:	  }
        -:  955:	}
    #####:  956:      }
    $$$$$:  956-block  0
        -:  957:			    
        -:  958:      else{
    #####:  959:	if (supplyCount(estate, state) > 0){
    $$$$$:  959-block  0
branch  0 never executed
branch  1 never executed
    #####:  960:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  961:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  962:	  if (supplyCount(estate, state) == 0){
    $$$$$:  962-block  0
branch  0 never executed
branch  1 never executed
    #####:  963:	    isGameOver(state);
    #####:  964:	  }
    $$$$$:  964-block  0
    #####:  965:	}
    $$$$$:  965-block  0
        -:  966:      }
        -:  967:	    
        -:  968:      
    #####:  969:      return 0;
    $$$$$:  969-block  0
        -:  970:		
        -:  971:    case great_hall:
        -:  972:      //+1 Card
        1:  973:      drawCard(currentPlayer, state);
        -:  974:			
        -:  975:      //+1 Actions
        1:  976:      state->numActions++;
        -:  977:			
        -:  978:      //discard card from hand
        1:  979:      discardCard(handPos, currentPlayer, state, 0);
        1:  980:      return 0;
        1:  980-block  0
        -:  981:		
        -:  982:    case minion:
        -:  983:      //+1 action
    #####:  984:      state->numActions++;
        -:  985:			
        -:  986:      //discard card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);
        -:  988:			
    #####:  989:      if (choice1)		//+2 coins
    $$$$$:  989-block  0
branch  0 never executed
branch  1 never executed
        -:  990:	{
    #####:  991:	  state->coins = state->coins + 2;
    #####:  992:	}
    $$$$$:  992-block  0
        -:  993:			
    #####:  994:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  994-block  0
branch  0 never executed
branch  1 never executed
        -:  995:	{
        -:  996:	  //discard hand
    #####:  997:	  while(numHandCards(state) > 0)
    $$$$$:  997-block  0
    $$$$$:  997-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  997-block  2
        -:  998:	    {
    #####:  999:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1000:	    }
        -: 1001:				
        -: 1002:	  //draw 4
    #####: 1003:	  for (i = 0; i < 4; i++)
    $$$$$: 1003-block  0
    $$$$$: 1003-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1003-block  2
        -: 1004:	    {
    #####: 1005:	      drawCard(currentPlayer, state);
    #####: 1006:	    }
    $$$$$: 1006-block  0
        -: 1007:				
        -: 1008:	  //other players discard hand and redraw if hand size > 4
    #####: 1009:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1009-block  0
    $$$$$: 1009-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1009-block  2
        -: 1010:	    {
    #####: 1011:	      if (i != currentPlayer)
    $$$$$: 1011-block  0
branch  0 never executed
branch  1 never executed
        -: 1012:		{
    #####: 1013:		  if ( state->handCount[i] > 4 )
    $$$$$: 1013-block  0
branch  0 never executed
branch  1 never executed
        -: 1014:		    {
        -: 1015:		      //discard hand
    #####: 1016:		      while( state->handCount[i] > 0 )
    $$$$$: 1016-block  0
    $$$$$: 1016-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1016-block  2
        -: 1017:			{
    #####: 1018:			  discardCard(handPos, i, state, 0);
        -: 1019:			}
        -: 1020:							
        -: 1021:		      //draw 4
    #####: 1022:		      for (j = 0; j < 4; j++)
    $$$$$: 1022-block  0
    $$$$$: 1022-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1022-block  2
        -: 1023:			{
    #####: 1024:			  drawCard(i, state);
    #####: 1025:			}
    $$$$$: 1025-block  0
    #####: 1026:		    }
    $$$$$: 1026-block  0
    #####: 1027:		}
    $$$$$: 1027-block  0
    #####: 1028:	    }
    $$$$$: 1028-block  0
        -: 1029:				
    #####: 1030:	}
    $$$$$: 1030-block  0
    #####: 1031:      return 0;
    $$$$$: 1031-block  0
        -: 1032:		
        -: 1033:    case steward:
    #####: 1034:      if (choice1 == 1)
    $$$$$: 1034-block  0
branch  0 never executed
branch  1 never executed
        -: 1035:	{
        -: 1036:	  //+2 cards
    #####: 1037:	  drawCard(currentPlayer, state);
    #####: 1038:	  drawCard(currentPlayer, state);
    #####: 1039:	}
    $$$$$: 1039-block  0
    #####: 1040:      else if (choice1 == 2)
    $$$$$: 1040-block  0
branch  0 never executed
branch  1 never executed
        -: 1041:	{
        -: 1042:	  //+2 coins
    #####: 1043:	  state->coins = state->coins + 2;
    #####: 1044:	}
    $$$$$: 1044-block  0
        -: 1045:      else
        -: 1046:	{
        -: 1047:	  //trash 2 cards in hand
    #####: 1048:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1049:	  discardCard(choice3, currentPlayer, state, 1);
    $$$$$: 1049-block  0
        -: 1050:	}
        -: 1051:			
        -: 1052:      //discard card from hand
    #####: 1053:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1054:      return 0;
    $$$$$: 1054-block  0
        -: 1055:		
        -: 1056:    case tribute:
    #####: 1057:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1057-block  0
branch  0 never executed
branch  1 never executed
    #####: 1058:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1058-block  0
branch  0 never executed
branch  1 never executed
    #####: 1059:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1060:	  state->deckCount[nextPlayer]--;
    #####: 1061:	}
    $$$$$: 1061-block  0
    #####: 1062:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1062-block  0
branch  0 never executed
branch  1 never executed
    #####: 1063:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1064:	  state->discardCount[nextPlayer]--;
    #####: 1065:	}
    $$$$$: 1065-block  0
        -: 1066:	else{
        -: 1067:	  //No Card to Reveal
        -: 1068:	  if (DEBUG){
        -: 1069:	    printf("No cards to reveal\n");
        -: 1070:	  }
        -: 1071:	}
    #####: 1072:      }
    $$$$$: 1072-block  0
        -: 1073:	    
        -: 1074:      else{
    #####: 1075:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1075-block  0
branch  0 never executed
branch  1 never executed
    #####: 1076:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1076-block  0
    $$$$$: 1076-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1076-block  2
    #####: 1077:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1078:	    state->deckCount[nextPlayer]++;
    #####: 1079:	    state->discard[nextPlayer][i] = -1;
    #####: 1080:	    state->discardCount[nextPlayer]--;
    #####: 1081:	  }
    $$$$$: 1081-block  0
        -: 1082:			    
    #####: 1083:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1084:	} 
    $$$$$: 1084-block  0
    #####: 1085:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1086:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1087:	state->deckCount[nextPlayer]--;
    #####: 1088:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1089:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1090:	state->deckCount[nextPlayer]--;
    $$$$$: 1090-block  0
        -: 1091:      }    
        -: 1092:		       
    #####: 1093:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1093-block  0
branch  0 never executed
branch  1 never executed
    #####: 1094:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1095:	state->playedCardCount++;
    #####: 1096:	tributeRevealedCards[1] = -1;
    #####: 1097:      }
    $$$$$: 1097-block  0
        -: 1098:
    #####: 1099:      for (i = 0; i <= 2; i ++){
    $$$$$: 1099-block  0
    $$$$$: 1099-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1099-block  2
    #####: 1100:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1100-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1100-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1100-block  2
branch  4 never executed
branch  5 never executed
    #####: 1101:	  state->coins += 2;
    #####: 1102:	}
    $$$$$: 1102-block  0
        -: 1103:		    
    #####: 1104:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1104-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1104-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1104-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1104-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1104-block  4
branch  8 never executed
branch  9 never executed
    #####: 1105:	  drawCard(currentPlayer, state);
    #####: 1106:	  drawCard(currentPlayer, state);
    #####: 1107:	}
    $$$$$: 1107-block  0
        -: 1108:	else{//Action Card
    #####: 1109:	  state->numActions = state->numActions + 2;
    $$$$$: 1109-block  0
        -: 1110:	}
    #####: 1111:      }
    $$$$$: 1111-block  0
        -: 1112:	    
    #####: 1113:      return 0;
    $$$$$: 1113-block  0
        -: 1114:		
        -: 1115:    case ambassador:
    #####: 1116:      j = 0;		//used to check if player has enough cards to discard
        -: 1117:
    #####: 1118:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1118-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1118-block  1
branch  2 never executed
branch  3 never executed
        -: 1119:	{
    #####: 1120:	  return -1;				
    $$$$$: 1120-block  0
        -: 1121:	}
        -: 1122:
    #####: 1123:      if (choice1 == handPos)
    $$$$$: 1123-block  0
branch  0 never executed
branch  1 never executed
        -: 1124:	{
    #####: 1125:	  return -1;
    $$$$$: 1125-block  0
        -: 1126:	}
        -: 1127:
    #####: 1128:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1128-block  0
    $$$$$: 1128-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1128-block  2
        -: 1129:	{
    #####: 1130:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1130-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1130-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1130-block  2
branch  4 never executed
branch  5 never executed
        -: 1131:	    {
    #####: 1132:	      j++;
    #####: 1133:	    }
    $$$$$: 1133-block  0
    #####: 1134:	}
    $$$$$: 1134-block  0
    #####: 1135:      if (j < choice2)
    $$$$$: 1135-block  0
branch  0 never executed
branch  1 never executed
        -: 1136:	{
    #####: 1137:	  return -1;				
    $$$$$: 1137-block  0
        -: 1138:	}
        -: 1139:
        -: 1140:      if (DEBUG) 
        -: 1141:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1142:
        -: 1143:      //increase supply count for choosen card by amount being discarded
    #####: 1144:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1145:			
        -: 1146:      //each other player gains a copy of revealed card
    #####: 1147:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1147-block  0
    $$$$$: 1147-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1147-block  2
        -: 1148:	{
    #####: 1149:	  if (i != currentPlayer)
    $$$$$: 1149-block  0
branch  0 never executed
branch  1 never executed
        -: 1150:	    {
    #####: 1151:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1152:	    }
    $$$$$: 1152-block  0
    #####: 1153:	}
    $$$$$: 1153-block  0
        -: 1154:
        -: 1155:      //discard played card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1157:
        -: 1158:      //trash copies of cards returned to supply
    #####: 1159:      for (j = 0; j < choice2; j++)
    $$$$$: 1159-block  0
    $$$$$: 1159-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1159-block  2
        -: 1160:	{
    #####: 1161:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1161-block  0
    $$$$$: 1161-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1161-block  2
        -: 1162:	    {
    #####: 1163:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1163-block  0
branch  0 never executed
branch  1 never executed
        -: 1164:		{
    #####: 1165:		  discardCard(i, currentPlayer, state, 1);
    #####: 1166:		  break;
    $$$$$: 1166-block  0
        -: 1167:		}
    #####: 1168:	    }
    $$$$$: 1168-block  0
    #####: 1169:	}			
    $$$$$: 1169-block  0
        -: 1170:
    #####: 1171:      return 0;
    $$$$$: 1171-block  0
        -: 1172:		
        -: 1173:    case cutpurse:
        -: 1174:
    #####: 1175:      updateCoins(currentPlayer, state, 2);
    #####: 1176:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1176-block  0
    $$$$$: 1176-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1176-block  2
        -: 1177:	{
    #####: 1178:	  if (i != currentPlayer)
    $$$$$: 1178-block  0
branch  0 never executed
branch  1 never executed
        -: 1179:	    {
    #####: 1180:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1180-block  0
    $$$$$: 1180-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1180-block  2
        -: 1181:		{
    #####: 1182:		  if (state->hand[i][j] == copper)
    $$$$$: 1182-block  0
branch  0 never executed
branch  1 never executed
        -: 1183:		    {
    #####: 1184:		      discardCard(j, i, state, 0);
    #####: 1185:		      break;
    $$$$$: 1185-block  0
        -: 1186:		    }
    #####: 1187:		  if (j == state->handCount[i])
    $$$$$: 1187-block  0
branch  0 never executed
branch  1 never executed
        -: 1188:		    {
    #####: 1189:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1189-block  0
    $$$$$: 1189-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1189-block  2
        -: 1190:			{
        -: 1191:			  if (DEBUG)
        -: 1192:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1193:			}	
    $$$$$: 1193-block  0
    #####: 1194:		      break;
    $$$$$: 1194-block  0
        -: 1195:		    }		
    #####: 1196:		}
    $$$$$: 1196-block  0
        -: 1197:					
    #####: 1198:	    }
    $$$$$: 1198-block  0
        -: 1199:				
    #####: 1200:	}				
    $$$$$: 1200-block  0
        -: 1201:
        -: 1202:      //discard played card from hand
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1204:
    #####: 1205:      return 0;
    $$$$$: 1205-block  0
        -: 1206:
        -: 1207:		
        -: 1208:    case embargo: 
        -: 1209:      //+2 Coins
    #####: 1210:      state->coins = state->coins + 2;
        -: 1211:			
        -: 1212:      //see if selected pile is in play
    #####: 1213:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1213-block  0
branch  0 never executed
branch  1 never executed
        -: 1214:	{
    #####: 1215:	  return -1;
    $$$$$: 1215-block  0
        -: 1216:	}
        -: 1217:			
        -: 1218:      //add embargo token to selected supply pile
    #####: 1219:      state->embargoTokens[choice1]++;
        -: 1220:			
        -: 1221:      //trash card
    #####: 1222:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1223:      return 0;
    $$$$$: 1223-block  0
        -: 1224:		
        -: 1225:    case outpost:
        -: 1226:      //set outpost flag
    #####: 1227:      state->outpostPlayed++;
        -: 1228:			
        -: 1229:      //discard card
    #####: 1230:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1231:      return 0;
    $$$$$: 1231-block  0
        -: 1232:		
        -: 1233:    case salvager:
        -: 1234:      //+1 buy
        1: 1235:      state->numBuys++;
        -: 1236:			
        1: 1237:      if (choice1)
        1: 1237-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 1238:	{
        -: 1239:	  //gain coins equal to trashed card
        1: 1240:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1241:	  //trash card
        1: 1242:	  discardCard(choice1, currentPlayer, state, 1);	
        1: 1243:	}
        1: 1243-block  0
        -: 1244:			
        -: 1245:      //discard card
        1: 1246:      discardCard(handPos, currentPlayer, state, 0);
        1: 1247:      return 0;
        1: 1247-block  0
        -: 1248:		
        -: 1249:    case sea_hag:
    #####: 1250:		return SeaHag(state);
    $$$$$: 1250-block  0
        -: 1251:		
        -: 1252:    case treasure_map:
    #####: 1253:		return TreasureMap(state, handPos);
    $$$$$: 1253-block  0
        -: 1254:    }
        -: 1255:	
    #####: 1256:  return -1;
    $$$$$: 1256-block  0
     3500: 1257:}
     3500: 1257-block  0
        -: 1258:
function discardCard called 3997 returned 100% blocks executed 80%
        -: 1259:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1260:{
        -: 1261:	
        -: 1262:  //if card is not trashed, added to Played pile 
     3997: 1263:  if (trashFlag < 1)
     3997: 1263-block  0
branch  0 taken 99%
branch  1 taken 1%
        -: 1264:    {
        -: 1265:      //add card to played pile
     3996: 1266:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     3996: 1267:      state->playedCardCount++;
     3996: 1268:    }
     3996: 1268-block  0
        -: 1269:	
        -: 1270:  //set played card to -1
     3997: 1271:  state->hand[currentPlayer][handPos] = -1;
        -: 1272:	
        -: 1273:  //remove card from player's hand
     3997: 1274:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
     3997: 1274-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
    #####: 1278:    }
    $$$$$: 1278-block  0
     3997: 1279:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
     3997: 1279-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1280:    {
        -: 1281:      //reduce number of cards in hand
    #####: 1282:      state->handCount[currentPlayer]--;
    #####: 1283:    }
    $$$$$: 1283-block  0
        -: 1284:  else 	
        -: 1285:    {
        -: 1286:      //replace discarded card with last card in hand
     3997: 1287:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1288:      //set last card to -1
     3997: 1289:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1290:      //reduce number of cards in hand
     3997: 1291:      state->handCount[currentPlayer]--;
     3997: 1291-block  0
        -: 1292:    }
        -: 1293:	
     3997: 1294:  return 0;
     3997: 1294-block  0
        -: 1295:}
        -: 1296:
function gainCard called 5872 returned 100% blocks executed 72%
        -: 1297:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1298:{
        -: 1299:  //Note: supplyPos is enum of choosen card
        -: 1300:	
        -: 1301:  //check if supply pile is empty (0) or card is not used in game (-1)
     5872: 1302:  if ( supplyCount(supplyPos, state) < 1 )
     5872: 1302-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1303:    {
    #####: 1304:      return -1;
    $$$$$: 1304-block  0
        -: 1305:    }
        -: 1306:	
        -: 1307:  //added card for [whoseTurn] current player:
        -: 1308:  // toFlag = 0 : add to discard
        -: 1309:  // toFlag = 1 : add to deck
        -: 1310:  // toFlag = 2 : add to hand
        -: 1311:
     5872: 1312:  if (toFlag == 1)
     5872: 1312-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1313:    {
    #####: 1314:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1315:      state->deckCount[player]++;
    #####: 1316:    }
    $$$$$: 1316-block  0
     5872: 1317:  else if (toFlag == 2)
     5872: 1317-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1318:    {
    #####: 1319:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1320:      state->handCount[player]++;
    #####: 1321:    }
    $$$$$: 1321-block  0
        -: 1322:  else
        -: 1323:    {
     5872: 1324:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     5872: 1325:      state->discardCount[player]++;
     5872: 1325-block  0
        -: 1326:    }
        -: 1327:	
        -: 1328:  //decrease number in supply pile
     5872: 1329:  state->supplyCount[supplyPos]--;
        -: 1330:	 
     5872: 1331:  return 0;
     5872: 1331-block  0
     5872: 1332:}
     5872: 1332-block  0
        -: 1333:
function updateCoins called 11505 returned 100% blocks executed 100%
        -: 1334:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1335:{
        -: 1336:  int i;
        -: 1337:	
        -: 1338:  //reset coin count
    11505: 1339:  state->coins = 0;
        -: 1340:
        -: 1341:  //add coins for each Treasure card in player's hand
   930744: 1342:  for (i = 0; i < state->handCount[player]; i++)
    11505: 1342-block  0
   930744: 1342-block  1
branch  0 taken 99%
branch  1 taken 1%
   919239: 1342-block  2
        -: 1343:    {
   919239: 1344:      if (state->hand[player][i] == copper)
   919239: 1344-block  0
branch  0 taken 7%
branch  1 taken 93%
        -: 1345:	{
    66029: 1346:	  state->coins += 1;
    66029: 1347:	}
    66029: 1347-block  0
   853210: 1348:      else if (state->hand[player][i] == silver)
   853210: 1348-block  0
branch  0 taken 4%
branch  1 taken 96%
        -: 1349:	{
    34205: 1350:	  state->coins += 2;
    34205: 1351:	}
    34205: 1351-block  0
   819005: 1352:      else if (state->hand[player][i] == gold)
   819005: 1352-block  0
branch  0 taken 4%
branch  1 taken 96%
        -: 1353:	{
    33664: 1354:	  state->coins += 3;
    33664: 1355:	}	
    33664: 1355-block  0
   919239: 1356:    }	
   919239: 1356-block  0
        -: 1357:
        -: 1358:  //add bonus
    11505: 1359:  state->coins += bonus;
        -: 1360:
    11505: 1361:  return 0;
    11505: 1361-block  0
        -: 1362:}
        -: 1363:
        -: 1364:
        -: 1365://end of dominion.c
        -: 1366:
